{"version":3,"sources":["components/search-box/search-box.module.scss","components/cards/cards.module.scss","components/card/card.module.scss","components/search-box/SearchBox.jsx","components/card/Card.jsx","components/cards/Cards.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","SearchBox","placeholder","handleChange","className","search","wrapper","type","onChange","Card","props","card","container","src","user","id","alt","name","email","Cards","cards","profiles","map","key","App","e","setState","searchField","target","value","state","fetch","then","res","json","users","this","filteredUsers","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6GACAA,EAAOC,QAAU,CAAC,QAAU,8B,gBCA5BD,EAAOC,QAAU,CAAC,UAAY,2B,gBCA9BD,EAAOC,QAAU,CAAC,UAAY,0B,uNCcfC,EAXG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAChC,OACE,2BACEC,UAAWC,IAAOC,QAClBC,KAAK,SACLL,YAAaA,EACbM,SAAUL,K,gCCMDM,EAbF,SAAAC,GACX,OACE,yBAAKN,UAAWO,IAAKC,WACnB,yBACEC,IAAG,+BAA0BH,EAAMI,KAAKC,GAArC,0BACHC,IAAI,qBAEN,4BAAKN,EAAMI,KAAKG,MAChB,2BAAIP,EAAMI,KAAKI,SCKNC,EAXD,SAAAT,GACZ,OACE,yBAAKN,UAAWgB,IAAMR,WACnB,IACAF,EAAMW,SAASC,KAAI,SAAAR,GAAI,OACtB,kBAAC,EAAD,CAAMS,IAAKT,EAAKC,GAAID,KAAMA,SCiCnBU,E,YApCb,aAAe,IAAD,8BACZ,+CAcFrB,aAAe,SAAAsB,GAAC,OAAI,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAZxD,EAAKC,MAAQ,CACXT,SAAU,GACVM,YAAa,IALH,E,iFASO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEL,SAAUc,S,+BAKnC,IAAD,EAC2BC,KAAKN,MAA/BT,EADD,EACCA,SAAUM,EADX,EACWA,YACZU,EAAgBhB,EAASiB,QAAO,SAAAxB,GAAI,OACxCA,EAAKG,KAAKsB,cAAcC,SAASb,EAAYY,kBAG/C,OACE,yBAAKnC,UAAU,OACb,+CACA,kBAAC,EAAD,CACEF,YAAa,eACbC,aAAciC,KAAKjC,eAErB,kBAAC,EAAD,CAAOkB,SAAUgB,S,GA/BPI,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.5bf7ca08.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"search-box_wrapper__1YF-d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"cards_container__WaAnB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"card_container__2VnJO\"};","import React from 'react';\r\n\r\nimport search from './search-box.module.scss';\r\n\r\nconst SearchBox = ({ placeholder, handleChange }) => {\r\n  return (\r\n    <input\r\n      className={search.wrapper}\r\n      type='search'\r\n      placeholder={placeholder}\r\n      onChange={handleChange}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\nimport card from './card.module.scss';\r\n\r\nconst Card = props => {\r\n  return (\r\n    <div className={card.container}>\r\n      <img\r\n        src={`https://robohash.org/${props.user.id}?set=set2&size=180x180`}\r\n        alt='user profile pic'\r\n      />\r\n      <h2>{props.user.name}</h2>\r\n      <p>{props.user.email}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\n\r\nimport cards from './cards.module.scss';\r\nimport Card from '../card/Card';\r\n\r\nconst Cards = props => {\r\n  return (\r\n    <div className={cards.container}>\r\n      {' '}\r\n      {props.profiles.map(user => (\r\n        <Card key={user.id} user={user} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import React, { Component } from 'react';\nimport './app.scss';\n\nimport SearchBox from './components/search-box/SearchBox';\nimport Cards from './components/cards/Cards';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      profiles: [],\n      searchField: ''\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(res => res.json())\n      .then(users => this.setState({ profiles: users }));\n  }\n\n  handleChange = e => this.setState({ searchField: e.target.value });\n\n  render() {\n    const { profiles, searchField } = this.state;\n    const filteredUsers = profiles.filter(user =>\n      user.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className='app'>\n        <h1>Search Profiles</h1>\n        <SearchBox\n          placeholder={'search users'}\n          handleChange={this.handleChange}\n        />\n        <Cards profiles={filteredUsers} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}